// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: dboxed-volume.proto

package dproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RepositoryCreateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	S3            *RepositoryConfigS3    `protobuf:"bytes,2,opt,name=s3,proto3,oneof" json:"s3,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepositoryCreateRequest) Reset() {
	*x = RepositoryCreateRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryCreateRequest) ProtoMessage() {}

func (x *RepositoryCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryCreateRequest.ProtoReflect.Descriptor instead.
func (*RepositoryCreateRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{0}
}

func (x *RepositoryCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepositoryCreateRequest) GetS3() *RepositoryConfigS3 {
	if x != nil {
		return x.S3
	}
	return nil
}

type RepositoryCreateReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repository    *Repository            `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepositoryCreateReply) Reset() {
	*x = RepositoryCreateReply{}
	mi := &file_dboxed_volume_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryCreateReply) ProtoMessage() {}

func (x *RepositoryCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryCreateReply.ProtoReflect.Descriptor instead.
func (*RepositoryCreateReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{1}
}

func (x *RepositoryCreateReply) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

type RepositoryUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	S3            *RepositoryConfigS3    `protobuf:"bytes,2,opt,name=s3,proto3,oneof" json:"s3,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepositoryUpdateRequest) Reset() {
	*x = RepositoryUpdateRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryUpdateRequest) ProtoMessage() {}

func (x *RepositoryUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryUpdateRequest.ProtoReflect.Descriptor instead.
func (*RepositoryUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{2}
}

func (x *RepositoryUpdateRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RepositoryUpdateRequest) GetS3() *RepositoryConfigS3 {
	if x != nil {
		return x.S3
	}
	return nil
}

type RepositoryUpdateReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repository    *Repository            `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepositoryUpdateReply) Reset() {
	*x = RepositoryUpdateReply{}
	mi := &file_dboxed_volume_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryUpdateReply) ProtoMessage() {}

func (x *RepositoryUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryUpdateReply.ProtoReflect.Descriptor instead.
func (*RepositoryUpdateReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{3}
}

func (x *RepositoryUpdateReply) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

type RepositoryByNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepositoryByNameRequest) Reset() {
	*x = RepositoryByNameRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryByNameRequest) ProtoMessage() {}

func (x *RepositoryByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryByNameRequest.ProtoReflect.Descriptor instead.
func (*RepositoryByNameRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{4}
}

func (x *RepositoryByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RepositoryByNameReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repository    *Repository            `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepositoryByNameReply) Reset() {
	*x = RepositoryByNameReply{}
	mi := &file_dboxed_volume_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryByNameReply) ProtoMessage() {}

func (x *RepositoryByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryByNameReply.ProtoReflect.Descriptor instead.
func (*RepositoryByNameReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{5}
}

func (x *RepositoryByNameReply) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

type VolumeCreateRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUuid string                 `protobuf:"bytes,1,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FsSize         int64                  `protobuf:"varint,3,opt,name=fs_size,json=fsSize,proto3" json:"fs_size,omitempty"`
	FsType         string                 `protobuf:"bytes,4,opt,name=fs_type,json=fsType,proto3" json:"fs_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VolumeCreateRequest) Reset() {
	*x = VolumeCreateRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCreateRequest) ProtoMessage() {}

func (x *VolumeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCreateRequest.ProtoReflect.Descriptor instead.
func (*VolumeCreateRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{6}
}

func (x *VolumeCreateRequest) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *VolumeCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeCreateRequest) GetFsSize() int64 {
	if x != nil {
		return x.FsSize
	}
	return 0
}

func (x *VolumeCreateRequest) GetFsType() string {
	if x != nil {
		return x.FsType
	}
	return ""
}

type VolumeCreateReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Volume        *Volume                `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeCreateReply) Reset() {
	*x = VolumeCreateReply{}
	mi := &file_dboxed_volume_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCreateReply) ProtoMessage() {}

func (x *VolumeCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCreateReply.ProtoReflect.Descriptor instead.
func (*VolumeCreateReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{7}
}

func (x *VolumeCreateReply) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type VolumeByNameRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUuid string                 `protobuf:"bytes,1,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VolumeByNameRequest) Reset() {
	*x = VolumeByNameRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeByNameRequest) ProtoMessage() {}

func (x *VolumeByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeByNameRequest.ProtoReflect.Descriptor instead.
func (*VolumeByNameRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{8}
}

func (x *VolumeByNameRequest) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *VolumeByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VolumeByNameReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Volume        *Volume                `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeByNameReply) Reset() {
	*x = VolumeByNameReply{}
	mi := &file_dboxed_volume_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeByNameReply) ProtoMessage() {}

func (x *VolumeByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeByNameReply.ProtoReflect.Descriptor instead.
func (*VolumeByNameReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{9}
}

func (x *VolumeByNameReply) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type VolumeLockRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUuid string                 `protobuf:"bytes,1,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	VolumeUuid     string                 `protobuf:"bytes,2,opt,name=volume_uuid,json=volumeUuid,proto3" json:"volume_uuid,omitempty"`
	PrevLockUuid   *string                `protobuf:"bytes,3,opt,name=prev_lock_uuid,json=prevLockUuid,proto3,oneof" json:"prev_lock_uuid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VolumeLockRequest) Reset() {
	*x = VolumeLockRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeLockRequest) ProtoMessage() {}

func (x *VolumeLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeLockRequest.ProtoReflect.Descriptor instead.
func (*VolumeLockRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{10}
}

func (x *VolumeLockRequest) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *VolumeLockRequest) GetVolumeUuid() string {
	if x != nil {
		return x.VolumeUuid
	}
	return ""
}

func (x *VolumeLockRequest) GetPrevLockUuid() string {
	if x != nil && x.PrevLockUuid != nil {
		return *x.PrevLockUuid
	}
	return ""
}

type VolumeLockReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Volume        *Volume                `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeLockReply) Reset() {
	*x = VolumeLockReply{}
	mi := &file_dboxed_volume_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeLockReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeLockReply) ProtoMessage() {}

func (x *VolumeLockReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeLockReply.ProtoReflect.Descriptor instead.
func (*VolumeLockReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{11}
}

func (x *VolumeLockReply) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type Repository struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	S3            *RepositoryConfigS3    `protobuf:"bytes,3,opt,name=s3,proto3" json:"s3,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Repository) Reset() {
	*x = Repository{}
	mi := &file_dboxed_volume_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{12}
}

func (x *Repository) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetS3() *RepositoryConfigS3 {
	if x != nil {
		return x.S3
	}
	return nil
}

type RepositoryConfigS3 struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Endpoint        string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Region          *string                `protobuf:"bytes,2,opt,name=region,proto3,oneof" json:"region,omitempty"`
	Bucket          string                 `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	AccessKeyId     string                 `protobuf:"bytes,4,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretAccessKey string                 `protobuf:"bytes,5,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	Prefix          string                 `protobuf:"bytes,6,opt,name=prefix,proto3" json:"prefix,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RepositoryConfigS3) Reset() {
	*x = RepositoryConfigS3{}
	mi := &file_dboxed_volume_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryConfigS3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigS3) ProtoMessage() {}

func (x *RepositoryConfigS3) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigS3.ProtoReflect.Descriptor instead.
func (*RepositoryConfigS3) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{13}
}

func (x *RepositoryConfigS3) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RepositoryConfigS3) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *RepositoryConfigS3) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *RepositoryConfigS3) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *RepositoryConfigS3) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *RepositoryConfigS3) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type Volume struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Uuid           string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RepositoryUuid string                 `protobuf:"bytes,2,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	FsSize         int64                  `protobuf:"varint,4,opt,name=fs_size,json=fsSize,proto3" json:"fs_size,omitempty"`
	FsType         string                 `protobuf:"bytes,5,opt,name=fs_type,json=fsType,proto3" json:"fs_type,omitempty"`
	LatestSnapshot *string                `protobuf:"bytes,6,opt,name=latest_snapshot,json=latestSnapshot,proto3,oneof" json:"latest_snapshot,omitempty"`
	Lock           *VolumeLock            `protobuf:"bytes,7,opt,name=lock,proto3,oneof" json:"lock,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Volume) Reset() {
	*x = Volume{}
	mi := &file_dboxed_volume_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{14}
}

func (x *Volume) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Volume) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetFsSize() int64 {
	if x != nil {
		return x.FsSize
	}
	return 0
}

func (x *Volume) GetFsType() string {
	if x != nil {
		return x.FsType
	}
	return ""
}

func (x *Volume) GetLatestSnapshot() string {
	if x != nil && x.LatestSnapshot != nil {
		return *x.LatestSnapshot
	}
	return ""
}

func (x *Volume) GetLock() *VolumeLock {
	if x != nil {
		return x.Lock
	}
	return nil
}

type VolumeLock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	LockTime      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeLock) Reset() {
	*x = VolumeLock{}
	mi := &file_dboxed_volume_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeLock) ProtoMessage() {}

func (x *VolumeLock) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeLock.ProtoReflect.Descriptor instead.
func (*VolumeLock) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{15}
}

func (x *VolumeLock) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VolumeLock) GetLockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LockTime
	}
	return nil
}

type S3ProxySmallPutRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUuid string                 `protobuf:"bytes,1,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	ObjectName     string                 `protobuf:"bytes,2,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	Body           []byte                 `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *S3ProxySmallPutRequest) Reset() {
	*x = S3ProxySmallPutRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxySmallPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxySmallPutRequest) ProtoMessage() {}

func (x *S3ProxySmallPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxySmallPutRequest.ProtoReflect.Descriptor instead.
func (*S3ProxySmallPutRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{16}
}

func (x *S3ProxySmallPutRequest) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *S3ProxySmallPutRequest) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *S3ProxySmallPutRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type S3ProxySmallPutReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3ProxySmallPutReply) Reset() {
	*x = S3ProxySmallPutReply{}
	mi := &file_dboxed_volume_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxySmallPutReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxySmallPutReply) ProtoMessage() {}

func (x *S3ProxySmallPutReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxySmallPutReply.ProtoReflect.Descriptor instead.
func (*S3ProxySmallPutReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{17}
}

type S3ProxyPresignGetRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUuid string                 `protobuf:"bytes,1,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	ObjectName     string                 `protobuf:"bytes,2,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *S3ProxyPresignGetRequest) Reset() {
	*x = S3ProxyPresignGetRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyPresignGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyPresignGetRequest) ProtoMessage() {}

func (x *S3ProxyPresignGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyPresignGetRequest.ProtoReflect.Descriptor instead.
func (*S3ProxyPresignGetRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{18}
}

func (x *S3ProxyPresignGetRequest) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *S3ProxyPresignGetRequest) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

type S3ProxyPresignGetReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Expires       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires,proto3" json:"expires,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3ProxyPresignGetReply) Reset() {
	*x = S3ProxyPresignGetReply{}
	mi := &file_dboxed_volume_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyPresignGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyPresignGetReply) ProtoMessage() {}

func (x *S3ProxyPresignGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyPresignGetReply.ProtoReflect.Descriptor instead.
func (*S3ProxyPresignGetReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{19}
}

func (x *S3ProxyPresignGetReply) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *S3ProxyPresignGetReply) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

type S3ProxyPresignPutRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUuid string                 `protobuf:"bytes,1,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	ObjectName     string                 `protobuf:"bytes,2,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *S3ProxyPresignPutRequest) Reset() {
	*x = S3ProxyPresignPutRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyPresignPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyPresignPutRequest) ProtoMessage() {}

func (x *S3ProxyPresignPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyPresignPutRequest.ProtoReflect.Descriptor instead.
func (*S3ProxyPresignPutRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{20}
}

func (x *S3ProxyPresignPutRequest) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *S3ProxyPresignPutRequest) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

type S3ProxyPresignPutReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Expires       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires,proto3" json:"expires,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3ProxyPresignPutReply) Reset() {
	*x = S3ProxyPresignPutReply{}
	mi := &file_dboxed_volume_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyPresignPutReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyPresignPutReply) ProtoMessage() {}

func (x *S3ProxyPresignPutReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyPresignPutReply.ProtoReflect.Descriptor instead.
func (*S3ProxyPresignPutReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{21}
}

func (x *S3ProxyPresignPutReply) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *S3ProxyPresignPutReply) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

type S3ProxyListObjectsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUuid string                 `protobuf:"bytes,1,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	Prefix         string                 `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *S3ProxyListObjectsRequest) Reset() {
	*x = S3ProxyListObjectsRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyListObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyListObjectsRequest) ProtoMessage() {}

func (x *S3ProxyListObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyListObjectsRequest.ProtoReflect.Descriptor instead.
func (*S3ProxyListObjectsRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{22}
}

func (x *S3ProxyListObjectsRequest) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *S3ProxyListObjectsRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type S3ProxyListObjectsReply struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Objects        []*S3ObjectInfo        `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
	CommonPrefixes []string               `protobuf:"bytes,2,rep,name=common_prefixes,json=commonPrefixes,proto3" json:"common_prefixes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *S3ProxyListObjectsReply) Reset() {
	*x = S3ProxyListObjectsReply{}
	mi := &file_dboxed_volume_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyListObjectsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyListObjectsReply) ProtoMessage() {}

func (x *S3ProxyListObjectsReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyListObjectsReply.ProtoReflect.Descriptor instead.
func (*S3ProxyListObjectsReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{23}
}

func (x *S3ProxyListObjectsReply) GetObjects() []*S3ObjectInfo {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *S3ProxyListObjectsReply) GetCommonPrefixes() []string {
	if x != nil {
		return x.CommonPrefixes
	}
	return nil
}

type S3ProxyRemoveObjectRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUuid string                 `protobuf:"bytes,1,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	ObjectName     string                 `protobuf:"bytes,2,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *S3ProxyRemoveObjectRequest) Reset() {
	*x = S3ProxyRemoveObjectRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyRemoveObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyRemoveObjectRequest) ProtoMessage() {}

func (x *S3ProxyRemoveObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyRemoveObjectRequest.ProtoReflect.Descriptor instead.
func (*S3ProxyRemoveObjectRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{24}
}

func (x *S3ProxyRemoveObjectRequest) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *S3ProxyRemoveObjectRequest) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

type S3ProxyRemoveObjectReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3ProxyRemoveObjectReply) Reset() {
	*x = S3ProxyRemoveObjectReply{}
	mi := &file_dboxed_volume_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyRemoveObjectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyRemoveObjectReply) ProtoMessage() {}

func (x *S3ProxyRemoveObjectReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyRemoveObjectReply.ProtoReflect.Descriptor instead.
func (*S3ProxyRemoveObjectReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{25}
}

type S3ProxyRenameObjectRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUuid string                 `protobuf:"bytes,1,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	OldObjectName  string                 `protobuf:"bytes,2,opt,name=old_object_name,json=oldObjectName,proto3" json:"old_object_name,omitempty"`
	NewObjectName  string                 `protobuf:"bytes,3,opt,name=new_object_name,json=newObjectName,proto3" json:"new_object_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *S3ProxyRenameObjectRequest) Reset() {
	*x = S3ProxyRenameObjectRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyRenameObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyRenameObjectRequest) ProtoMessage() {}

func (x *S3ProxyRenameObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyRenameObjectRequest.ProtoReflect.Descriptor instead.
func (*S3ProxyRenameObjectRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{26}
}

func (x *S3ProxyRenameObjectRequest) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *S3ProxyRenameObjectRequest) GetOldObjectName() string {
	if x != nil {
		return x.OldObjectName
	}
	return ""
}

func (x *S3ProxyRenameObjectRequest) GetNewObjectName() string {
	if x != nil {
		return x.NewObjectName
	}
	return ""
}

type S3ProxyRenameObjectReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3ProxyRenameObjectReply) Reset() {
	*x = S3ProxyRenameObjectReply{}
	mi := &file_dboxed_volume_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyRenameObjectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyRenameObjectReply) ProtoMessage() {}

func (x *S3ProxyRenameObjectReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyRenameObjectReply.ProtoReflect.Descriptor instead.
func (*S3ProxyRenameObjectReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{27}
}

type S3ProxyCreateMultipartUploadRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUuid     string                 `protobuf:"bytes,1,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	ObjectName         string                 `protobuf:"bytes,2,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	PresignedPartCount int32                  `protobuf:"varint,3,opt,name=presigned_part_count,json=presignedPartCount,proto3" json:"presigned_part_count,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *S3ProxyCreateMultipartUploadRequest) Reset() {
	*x = S3ProxyCreateMultipartUploadRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyCreateMultipartUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyCreateMultipartUploadRequest) ProtoMessage() {}

func (x *S3ProxyCreateMultipartUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyCreateMultipartUploadRequest.ProtoReflect.Descriptor instead.
func (*S3ProxyCreateMultipartUploadRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{28}
}

func (x *S3ProxyCreateMultipartUploadRequest) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *S3ProxyCreateMultipartUploadRequest) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *S3ProxyCreateMultipartUploadRequest) GetPresignedPartCount() int32 {
	if x != nil {
		return x.PresignedPartCount
	}
	return 0
}

type S3ProxyCreateMultipartUploadReply struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	UploadId            string                 `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	PresignedUploadUrls []string               `protobuf:"bytes,2,rep,name=presigned_upload_urls,json=presignedUploadUrls,proto3" json:"presigned_upload_urls,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *S3ProxyCreateMultipartUploadReply) Reset() {
	*x = S3ProxyCreateMultipartUploadReply{}
	mi := &file_dboxed_volume_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyCreateMultipartUploadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyCreateMultipartUploadReply) ProtoMessage() {}

func (x *S3ProxyCreateMultipartUploadReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyCreateMultipartUploadReply.ProtoReflect.Descriptor instead.
func (*S3ProxyCreateMultipartUploadReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{29}
}

func (x *S3ProxyCreateMultipartUploadReply) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *S3ProxyCreateMultipartUploadReply) GetPresignedUploadUrls() []string {
	if x != nil {
		return x.PresignedUploadUrls
	}
	return nil
}

type S3ProxyPresignMultipartUploadRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUuid string                 `protobuf:"bytes,1,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	ObjectName     string                 `protobuf:"bytes,2,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	UploadId       string                 `protobuf:"bytes,3,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	StartPart      int32                  `protobuf:"varint,4,opt,name=start_part,json=startPart,proto3" json:"start_part,omitempty"`
	Count          int32                  `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *S3ProxyPresignMultipartUploadRequest) Reset() {
	*x = S3ProxyPresignMultipartUploadRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyPresignMultipartUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyPresignMultipartUploadRequest) ProtoMessage() {}

func (x *S3ProxyPresignMultipartUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyPresignMultipartUploadRequest.ProtoReflect.Descriptor instead.
func (*S3ProxyPresignMultipartUploadRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{30}
}

func (x *S3ProxyPresignMultipartUploadRequest) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *S3ProxyPresignMultipartUploadRequest) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *S3ProxyPresignMultipartUploadRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *S3ProxyPresignMultipartUploadRequest) GetStartPart() int32 {
	if x != nil {
		return x.StartPart
	}
	return 0
}

func (x *S3ProxyPresignMultipartUploadRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type S3ProxyPresignMultipartUploadReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Urls          []string               `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3ProxyPresignMultipartUploadReply) Reset() {
	*x = S3ProxyPresignMultipartUploadReply{}
	mi := &file_dboxed_volume_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyPresignMultipartUploadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyPresignMultipartUploadReply) ProtoMessage() {}

func (x *S3ProxyPresignMultipartUploadReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyPresignMultipartUploadReply.ProtoReflect.Descriptor instead.
func (*S3ProxyPresignMultipartUploadReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{31}
}

func (x *S3ProxyPresignMultipartUploadReply) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type S3ProxyCompleteMultipartUploadRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUuid string                 `protobuf:"bytes,1,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	ObjectName     string                 `protobuf:"bytes,2,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	UploadId       string                 `protobuf:"bytes,3,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	CompleteParts  []*S3CompletePart      `protobuf:"bytes,4,rep,name=complete_parts,json=completeParts,proto3" json:"complete_parts,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *S3ProxyCompleteMultipartUploadRequest) Reset() {
	*x = S3ProxyCompleteMultipartUploadRequest{}
	mi := &file_dboxed_volume_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyCompleteMultipartUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyCompleteMultipartUploadRequest) ProtoMessage() {}

func (x *S3ProxyCompleteMultipartUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyCompleteMultipartUploadRequest.ProtoReflect.Descriptor instead.
func (*S3ProxyCompleteMultipartUploadRequest) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{32}
}

func (x *S3ProxyCompleteMultipartUploadRequest) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *S3ProxyCompleteMultipartUploadRequest) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *S3ProxyCompleteMultipartUploadRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *S3ProxyCompleteMultipartUploadRequest) GetCompleteParts() []*S3CompletePart {
	if x != nil {
		return x.CompleteParts
	}
	return nil
}

type S3CompletePart struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartNumer     int32                  `protobuf:"varint,1,opt,name=part_numer,json=partNumer,proto3" json:"part_numer,omitempty"`
	Etag          string                 `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3CompletePart) Reset() {
	*x = S3CompletePart{}
	mi := &file_dboxed_volume_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3CompletePart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3CompletePart) ProtoMessage() {}

func (x *S3CompletePart) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3CompletePart.ProtoReflect.Descriptor instead.
func (*S3CompletePart) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{33}
}

func (x *S3CompletePart) GetPartNumer() int32 {
	if x != nil {
		return x.PartNumer
	}
	return 0
}

func (x *S3CompletePart) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

type S3ProxyCompleteMultipartUploadReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3ProxyCompleteMultipartUploadReply) Reset() {
	*x = S3ProxyCompleteMultipartUploadReply{}
	mi := &file_dboxed_volume_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ProxyCompleteMultipartUploadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxyCompleteMultipartUploadReply) ProtoMessage() {}

func (x *S3ProxyCompleteMultipartUploadReply) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxyCompleteMultipartUploadReply.ProtoReflect.Descriptor instead.
func (*S3ProxyCompleteMultipartUploadReply) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{34}
}

type S3ObjectInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Key             string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Size            int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	LastModified    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	Etag            string                 `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	PresignedGetUrl string                 `protobuf:"bytes,5,opt,name=presigned_get_url,json=presignedGetUrl,proto3" json:"presigned_get_url,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *S3ObjectInfo) Reset() {
	*x = S3ObjectInfo{}
	mi := &file_dboxed_volume_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ObjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ObjectInfo) ProtoMessage() {}

func (x *S3ObjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dboxed_volume_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ObjectInfo.ProtoReflect.Descriptor instead.
func (*S3ObjectInfo) Descriptor() ([]byte, []int) {
	return file_dboxed_volume_proto_rawDescGZIP(), []int{35}
}

func (x *S3ObjectInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *S3ObjectInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *S3ObjectInfo) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *S3ObjectInfo) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *S3ObjectInfo) GetPresignedGetUrl() string {
	if x != nil {
		return x.PresignedGetUrl
	}
	return ""
}

var File_dboxed_volume_proto protoreflect.FileDescriptor

const file_dboxed_volume_proto_rawDesc = "" +
	"\n" +
	"\x13dboxed-volume.proto\x12\rdboxed_volume\x1a\x1fgoogle/protobuf/timestamp.proto\"l\n" +
	"\x17RepositoryCreateRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x126\n" +
	"\x02s3\x18\x02 \x01(\v2!.dboxed_volume.RepositoryConfigS3H\x00R\x02s3\x88\x01\x01B\x05\n" +
	"\x03_s3\"R\n" +
	"\x15RepositoryCreateReply\x129\n" +
	"\n" +
	"repository\x18\x01 \x01(\v2\x19.dboxed_volume.RepositoryR\n" +
	"repository\"l\n" +
	"\x17RepositoryUpdateRequest\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x126\n" +
	"\x02s3\x18\x02 \x01(\v2!.dboxed_volume.RepositoryConfigS3H\x00R\x02s3\x88\x01\x01B\x05\n" +
	"\x03_s3\"R\n" +
	"\x15RepositoryUpdateReply\x129\n" +
	"\n" +
	"repository\x18\x01 \x01(\v2\x19.dboxed_volume.RepositoryR\n" +
	"repository\"-\n" +
	"\x17RepositoryByNameRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"R\n" +
	"\x15RepositoryByNameReply\x129\n" +
	"\n" +
	"repository\x18\x01 \x01(\v2\x19.dboxed_volume.RepositoryR\n" +
	"repository\"\x84\x01\n" +
	"\x13VolumeCreateRequest\x12'\n" +
	"\x0frepository_uuid\x18\x01 \x01(\tR\x0erepositoryUuid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x17\n" +
	"\afs_size\x18\x03 \x01(\x03R\x06fsSize\x12\x17\n" +
	"\afs_type\x18\x04 \x01(\tR\x06fsType\"B\n" +
	"\x11VolumeCreateReply\x12-\n" +
	"\x06volume\x18\x01 \x01(\v2\x15.dboxed_volume.VolumeR\x06volume\"R\n" +
	"\x13VolumeByNameRequest\x12'\n" +
	"\x0frepository_uuid\x18\x01 \x01(\tR\x0erepositoryUuid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"B\n" +
	"\x11VolumeByNameReply\x12-\n" +
	"\x06volume\x18\x01 \x01(\v2\x15.dboxed_volume.VolumeR\x06volume\"\x9b\x01\n" +
	"\x11VolumeLockRequest\x12'\n" +
	"\x0frepository_uuid\x18\x01 \x01(\tR\x0erepositoryUuid\x12\x1f\n" +
	"\vvolume_uuid\x18\x02 \x01(\tR\n" +
	"volumeUuid\x12)\n" +
	"\x0eprev_lock_uuid\x18\x03 \x01(\tH\x00R\fprevLockUuid\x88\x01\x01B\x11\n" +
	"\x0f_prev_lock_uuid\"@\n" +
	"\x0fVolumeLockReply\x12-\n" +
	"\x06volume\x18\x01 \x01(\v2\x15.dboxed_volume.VolumeR\x06volume\"g\n" +
	"\n" +
	"Repository\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x121\n" +
	"\x02s3\x18\x03 \x01(\v2!.dboxed_volume.RepositoryConfigS3R\x02s3\"\xd8\x01\n" +
	"\x12RepositoryConfigS3\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x1b\n" +
	"\x06region\x18\x02 \x01(\tH\x00R\x06region\x88\x01\x01\x12\x16\n" +
	"\x06bucket\x18\x03 \x01(\tR\x06bucket\x12\"\n" +
	"\raccess_key_id\x18\x04 \x01(\tR\vaccessKeyId\x12*\n" +
	"\x11secret_access_key\x18\x05 \x01(\tR\x0fsecretAccessKey\x12\x16\n" +
	"\x06prefix\x18\x06 \x01(\tR\x06prefixB\t\n" +
	"\a_region\"\x8a\x02\n" +
	"\x06Volume\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12'\n" +
	"\x0frepository_uuid\x18\x02 \x01(\tR\x0erepositoryUuid\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x17\n" +
	"\afs_size\x18\x04 \x01(\x03R\x06fsSize\x12\x17\n" +
	"\afs_type\x18\x05 \x01(\tR\x06fsType\x12,\n" +
	"\x0flatest_snapshot\x18\x06 \x01(\tH\x00R\x0elatestSnapshot\x88\x01\x01\x122\n" +
	"\x04lock\x18\a \x01(\v2\x19.dboxed_volume.VolumeLockH\x01R\x04lock\x88\x01\x01B\x12\n" +
	"\x10_latest_snapshotB\a\n" +
	"\x05_lock\"Y\n" +
	"\n" +
	"VolumeLock\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x127\n" +
	"\tlock_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\blockTime\"v\n" +
	"\x16S3ProxySmallPutRequest\x12'\n" +
	"\x0frepository_uuid\x18\x01 \x01(\tR\x0erepositoryUuid\x12\x1f\n" +
	"\vobject_name\x18\x02 \x01(\tR\n" +
	"objectName\x12\x12\n" +
	"\x04body\x18\x03 \x01(\fR\x04body\"\x16\n" +
	"\x14S3ProxySmallPutReply\"d\n" +
	"\x18S3ProxyPresignGetRequest\x12'\n" +
	"\x0frepository_uuid\x18\x01 \x01(\tR\x0erepositoryUuid\x12\x1f\n" +
	"\vobject_name\x18\x02 \x01(\tR\n" +
	"objectName\"`\n" +
	"\x16S3ProxyPresignGetReply\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x124\n" +
	"\aexpires\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\aexpires\"d\n" +
	"\x18S3ProxyPresignPutRequest\x12'\n" +
	"\x0frepository_uuid\x18\x01 \x01(\tR\x0erepositoryUuid\x12\x1f\n" +
	"\vobject_name\x18\x02 \x01(\tR\n" +
	"objectName\"`\n" +
	"\x16S3ProxyPresignPutReply\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x124\n" +
	"\aexpires\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\aexpires\"\\\n" +
	"\x19S3ProxyListObjectsRequest\x12'\n" +
	"\x0frepository_uuid\x18\x01 \x01(\tR\x0erepositoryUuid\x12\x16\n" +
	"\x06prefix\x18\x02 \x01(\tR\x06prefix\"y\n" +
	"\x17S3ProxyListObjectsReply\x125\n" +
	"\aobjects\x18\x01 \x03(\v2\x1b.dboxed_volume.S3ObjectInfoR\aobjects\x12'\n" +
	"\x0fcommon_prefixes\x18\x02 \x03(\tR\x0ecommonPrefixes\"f\n" +
	"\x1aS3ProxyRemoveObjectRequest\x12'\n" +
	"\x0frepository_uuid\x18\x01 \x01(\tR\x0erepositoryUuid\x12\x1f\n" +
	"\vobject_name\x18\x02 \x01(\tR\n" +
	"objectName\"\x1a\n" +
	"\x18S3ProxyRemoveObjectReply\"\x95\x01\n" +
	"\x1aS3ProxyRenameObjectRequest\x12'\n" +
	"\x0frepository_uuid\x18\x01 \x01(\tR\x0erepositoryUuid\x12&\n" +
	"\x0fold_object_name\x18\x02 \x01(\tR\roldObjectName\x12&\n" +
	"\x0fnew_object_name\x18\x03 \x01(\tR\rnewObjectName\"\x1a\n" +
	"\x18S3ProxyRenameObjectReply\"\xa1\x01\n" +
	"#S3ProxyCreateMultipartUploadRequest\x12'\n" +
	"\x0frepository_uuid\x18\x01 \x01(\tR\x0erepositoryUuid\x12\x1f\n" +
	"\vobject_name\x18\x02 \x01(\tR\n" +
	"objectName\x120\n" +
	"\x14presigned_part_count\x18\x03 \x01(\x05R\x12presignedPartCount\"t\n" +
	"!S3ProxyCreateMultipartUploadReply\x12\x1b\n" +
	"\tupload_id\x18\x01 \x01(\tR\buploadId\x122\n" +
	"\x15presigned_upload_urls\x18\x02 \x03(\tR\x13presignedUploadUrls\"\xc2\x01\n" +
	"$S3ProxyPresignMultipartUploadRequest\x12'\n" +
	"\x0frepository_uuid\x18\x01 \x01(\tR\x0erepositoryUuid\x12\x1f\n" +
	"\vobject_name\x18\x02 \x01(\tR\n" +
	"objectName\x12\x1b\n" +
	"\tupload_id\x18\x03 \x01(\tR\buploadId\x12\x1d\n" +
	"\n" +
	"start_part\x18\x04 \x01(\x05R\tstartPart\x12\x14\n" +
	"\x05count\x18\x05 \x01(\x05R\x05count\"8\n" +
	"\"S3ProxyPresignMultipartUploadReply\x12\x12\n" +
	"\x04urls\x18\x01 \x03(\tR\x04urls\"\xd4\x01\n" +
	"%S3ProxyCompleteMultipartUploadRequest\x12'\n" +
	"\x0frepository_uuid\x18\x01 \x01(\tR\x0erepositoryUuid\x12\x1f\n" +
	"\vobject_name\x18\x02 \x01(\tR\n" +
	"objectName\x12\x1b\n" +
	"\tupload_id\x18\x03 \x01(\tR\buploadId\x12D\n" +
	"\x0ecomplete_parts\x18\x04 \x03(\v2\x1d.dboxed_volume.S3CompletePartR\rcompleteParts\"C\n" +
	"\x0eS3CompletePart\x12\x1d\n" +
	"\n" +
	"part_numer\x18\x01 \x01(\x05R\tpartNumer\x12\x12\n" +
	"\x04etag\x18\x02 \x01(\tR\x04etag\"%\n" +
	"#S3ProxyCompleteMultipartUploadReply\"\xb5\x01\n" +
	"\fS3ObjectInfo\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\x12?\n" +
	"\rlast_modified\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\flastModified\x12\x12\n" +
	"\x04etag\x18\x04 \x01(\tR\x04etag\x12*\n" +
	"\x11presigned_get_url\x18\x05 \x01(\tR\x0fpresignedGetUrlB1Z/github.com/dboxed/dboxed-volume/pkg/nats/dprotob\x06proto3"

var (
	file_dboxed_volume_proto_rawDescOnce sync.Once
	file_dboxed_volume_proto_rawDescData []byte
)

func file_dboxed_volume_proto_rawDescGZIP() []byte {
	file_dboxed_volume_proto_rawDescOnce.Do(func() {
		file_dboxed_volume_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dboxed_volume_proto_rawDesc), len(file_dboxed_volume_proto_rawDesc)))
	})
	return file_dboxed_volume_proto_rawDescData
}

var file_dboxed_volume_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_dboxed_volume_proto_goTypes = []any{
	(*RepositoryCreateRequest)(nil),               // 0: dboxed_volume.RepositoryCreateRequest
	(*RepositoryCreateReply)(nil),                 // 1: dboxed_volume.RepositoryCreateReply
	(*RepositoryUpdateRequest)(nil),               // 2: dboxed_volume.RepositoryUpdateRequest
	(*RepositoryUpdateReply)(nil),                 // 3: dboxed_volume.RepositoryUpdateReply
	(*RepositoryByNameRequest)(nil),               // 4: dboxed_volume.RepositoryByNameRequest
	(*RepositoryByNameReply)(nil),                 // 5: dboxed_volume.RepositoryByNameReply
	(*VolumeCreateRequest)(nil),                   // 6: dboxed_volume.VolumeCreateRequest
	(*VolumeCreateReply)(nil),                     // 7: dboxed_volume.VolumeCreateReply
	(*VolumeByNameRequest)(nil),                   // 8: dboxed_volume.VolumeByNameRequest
	(*VolumeByNameReply)(nil),                     // 9: dboxed_volume.VolumeByNameReply
	(*VolumeLockRequest)(nil),                     // 10: dboxed_volume.VolumeLockRequest
	(*VolumeLockReply)(nil),                       // 11: dboxed_volume.VolumeLockReply
	(*Repository)(nil),                            // 12: dboxed_volume.Repository
	(*RepositoryConfigS3)(nil),                    // 13: dboxed_volume.RepositoryConfigS3
	(*Volume)(nil),                                // 14: dboxed_volume.Volume
	(*VolumeLock)(nil),                            // 15: dboxed_volume.VolumeLock
	(*S3ProxySmallPutRequest)(nil),                // 16: dboxed_volume.S3ProxySmallPutRequest
	(*S3ProxySmallPutReply)(nil),                  // 17: dboxed_volume.S3ProxySmallPutReply
	(*S3ProxyPresignGetRequest)(nil),              // 18: dboxed_volume.S3ProxyPresignGetRequest
	(*S3ProxyPresignGetReply)(nil),                // 19: dboxed_volume.S3ProxyPresignGetReply
	(*S3ProxyPresignPutRequest)(nil),              // 20: dboxed_volume.S3ProxyPresignPutRequest
	(*S3ProxyPresignPutReply)(nil),                // 21: dboxed_volume.S3ProxyPresignPutReply
	(*S3ProxyListObjectsRequest)(nil),             // 22: dboxed_volume.S3ProxyListObjectsRequest
	(*S3ProxyListObjectsReply)(nil),               // 23: dboxed_volume.S3ProxyListObjectsReply
	(*S3ProxyRemoveObjectRequest)(nil),            // 24: dboxed_volume.S3ProxyRemoveObjectRequest
	(*S3ProxyRemoveObjectReply)(nil),              // 25: dboxed_volume.S3ProxyRemoveObjectReply
	(*S3ProxyRenameObjectRequest)(nil),            // 26: dboxed_volume.S3ProxyRenameObjectRequest
	(*S3ProxyRenameObjectReply)(nil),              // 27: dboxed_volume.S3ProxyRenameObjectReply
	(*S3ProxyCreateMultipartUploadRequest)(nil),   // 28: dboxed_volume.S3ProxyCreateMultipartUploadRequest
	(*S3ProxyCreateMultipartUploadReply)(nil),     // 29: dboxed_volume.S3ProxyCreateMultipartUploadReply
	(*S3ProxyPresignMultipartUploadRequest)(nil),  // 30: dboxed_volume.S3ProxyPresignMultipartUploadRequest
	(*S3ProxyPresignMultipartUploadReply)(nil),    // 31: dboxed_volume.S3ProxyPresignMultipartUploadReply
	(*S3ProxyCompleteMultipartUploadRequest)(nil), // 32: dboxed_volume.S3ProxyCompleteMultipartUploadRequest
	(*S3CompletePart)(nil),                        // 33: dboxed_volume.S3CompletePart
	(*S3ProxyCompleteMultipartUploadReply)(nil),   // 34: dboxed_volume.S3ProxyCompleteMultipartUploadReply
	(*S3ObjectInfo)(nil),                          // 35: dboxed_volume.S3ObjectInfo
	(*timestamppb.Timestamp)(nil),                 // 36: google.protobuf.Timestamp
}
var file_dboxed_volume_proto_depIdxs = []int32{
	13, // 0: dboxed_volume.RepositoryCreateRequest.s3:type_name -> dboxed_volume.RepositoryConfigS3
	12, // 1: dboxed_volume.RepositoryCreateReply.repository:type_name -> dboxed_volume.Repository
	13, // 2: dboxed_volume.RepositoryUpdateRequest.s3:type_name -> dboxed_volume.RepositoryConfigS3
	12, // 3: dboxed_volume.RepositoryUpdateReply.repository:type_name -> dboxed_volume.Repository
	12, // 4: dboxed_volume.RepositoryByNameReply.repository:type_name -> dboxed_volume.Repository
	14, // 5: dboxed_volume.VolumeCreateReply.volume:type_name -> dboxed_volume.Volume
	14, // 6: dboxed_volume.VolumeByNameReply.volume:type_name -> dboxed_volume.Volume
	14, // 7: dboxed_volume.VolumeLockReply.volume:type_name -> dboxed_volume.Volume
	13, // 8: dboxed_volume.Repository.s3:type_name -> dboxed_volume.RepositoryConfigS3
	15, // 9: dboxed_volume.Volume.lock:type_name -> dboxed_volume.VolumeLock
	36, // 10: dboxed_volume.VolumeLock.lock_time:type_name -> google.protobuf.Timestamp
	36, // 11: dboxed_volume.S3ProxyPresignGetReply.expires:type_name -> google.protobuf.Timestamp
	36, // 12: dboxed_volume.S3ProxyPresignPutReply.expires:type_name -> google.protobuf.Timestamp
	35, // 13: dboxed_volume.S3ProxyListObjectsReply.objects:type_name -> dboxed_volume.S3ObjectInfo
	33, // 14: dboxed_volume.S3ProxyCompleteMultipartUploadRequest.complete_parts:type_name -> dboxed_volume.S3CompletePart
	36, // 15: dboxed_volume.S3ObjectInfo.last_modified:type_name -> google.protobuf.Timestamp
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_dboxed_volume_proto_init() }
func file_dboxed_volume_proto_init() {
	if File_dboxed_volume_proto != nil {
		return
	}
	file_dboxed_volume_proto_msgTypes[0].OneofWrappers = []any{}
	file_dboxed_volume_proto_msgTypes[2].OneofWrappers = []any{}
	file_dboxed_volume_proto_msgTypes[10].OneofWrappers = []any{}
	file_dboxed_volume_proto_msgTypes[13].OneofWrappers = []any{}
	file_dboxed_volume_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dboxed_volume_proto_rawDesc), len(file_dboxed_volume_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dboxed_volume_proto_goTypes,
		DependencyIndexes: file_dboxed_volume_proto_depIdxs,
		MessageInfos:      file_dboxed_volume_proto_msgTypes,
	}.Build()
	File_dboxed_volume_proto = out.File
	file_dboxed_volume_proto_goTypes = nil
	file_dboxed_volume_proto_depIdxs = nil
}
